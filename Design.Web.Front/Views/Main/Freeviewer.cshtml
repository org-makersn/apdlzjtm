@{
    ViewBag.Title = "Free STL viewer";
}

<style type="text/css">
    html
    {
        margin: 0;
    }

    body
    {
        margin: 0;
    }

    .cinfo
    {
        width: 250px;
        background: #DDDDDD;
        border: 1px solid;
        border-radius: 25px;
        padding: 2px 10px 2px 10px;
        margin-bottom: 20px;
    }

        .cinfo table
        {
            width: 100%;
        }

        .cinfo tr
        {
            text-align: left;
            vertical-align: top;
        }

    #statswrap
    {
        display: inline-block;
        vertical-align: top;
        -webkit-transition: width 1.5s;
        transition: width 1.5s;
        overflow: hidden;
    }

    .cbar
    {
        width: 20px;
        height: 20px;
        display: inline-block;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .cact
    {
        margin-bottom: 5px;
    }

        .cact span
        {
            border-bottom: 1px dotted #3434AB;
            color: #3434AB;
            cursor: pointer;
        }
</style>



<style>
    header
    {
        text-align: center;
        border: 1px solid #909090;
        border-radius: 12px;
        padding: 5px;
        margin: 5px;
        background: #FFFFFF;
    }

    footer
    {
        float: right;
        font: 14px Arial;
        color: #1010FF;
        margin: 30px;
    }

        footer a
        {
            text-decoration: none;
            font: 14px Arial;
            color: #1010FF;
        }

            footer a:hover
            {
                text-decoration: none;
                font: 14px Arial;
                color: #1010FF;
            }

    h2
    {
        margin-bottom: 5px;
        margin-top: 0px;
    }

    h4
    {
        margin-left: 20px;
        margin-bottom: 1px;
        margin-top: 2px;
        color: #202050;
    }

    h5
    {
        margin-left: 20px;
        margin-bottom: 2px;
        margin-top: 0px;
        font-weight: normal;
    }

    .stitle
    {
        font: 20px Arial;
        color: #2020DD;
        margin: 10px 30px 10px 30px;
    }

    #cjc
    {
        position: absolute;
        width: 100%;
        height: 100%;
        background: #1b1c1e;
        background-image: linear-gradient(#7d8fa3, #1b1c1e);
    }
</style>

<script src="@Url.VersionedContent("~/Content/freeviewer/three.min.js")"></script>

<script src="@Url.VersionedContent("~/Content/freeviewer/webgl_detector.js")"></script>

<script src="@Url.VersionedContent("~/Content/freeviewer/OrbitControls.js")"></script>

<script src="@Url.VersionedContent("~/Content/freeviewer/parser.js")"></script>

<script src="@Url.VersionedContent("~/Content/freeviewer/read_internal.js")"></script>

<script src="@Url.VersionedContent("~/Content/freeviewer/read_external.js")"></script>

<script src="@Url.VersionedContent("~/Content/freeviewer/Thingiview2.js")"></script>
<script src="@Url.VersionedContent("~/Content/freeviewer/NormalControls.js")"></script>
<script> var need_browser = false; </script>
<!--[if lt IE 10 ]>
		<script>
			//window.location.href="/replace_browser.html";
			need_browser=true;
		</script>
    <![endif]-->

<script>
    if (!(typeof FileReader !== "undefined")) {
        //window.location.href="/replace_browser.html";
        need_browser = true;
    }
</script>

<script>
    var is_ie = !!window.MSStream;
    var waiting = false;
    var mesh = null;
    var material = new THREE.MeshLambertMaterial({ color: 0x909090, overdraw: 1, wireframe: false, shading: THREE.FlatShading, vertexColors: THREE.FaceColors });

    if (!is_ie)
        //double side not supported on IE
        material.side = THREE.DoubleSide;

    var cancel_download = false;
    var max_file_size = 60000000;
    var mesh_color = '#909090';

    function $id(id) {
        //alert("id");
        return document.getElementById(id);
    }

    function do_resize() {
        //alert("do_resize");
        var height = isNaN(window.innerHeight) ? window.clientHeight : window.innerHeight;
        var width = isNaN(window.innerWidth) ? window.clientWidth : window.innerWidth;
        height = Math.min(height, width - 150);
        $id('cjc').style.height = (height - 220) + 'px';
        $id('cjc').style.width = (height - 220) + 'px';
        $id('cjcwrap').style.height = (height - 220) + 'px';
        $id('cjcwrap').style.width = (height - 220) + 'px';
        $id('cjcdrag').style.top = ((height - 320) / 2) + 'px';
        $id('cjcdrag').style.left = ((height - 570) / 2) + 'px';
        $id('cjcpbar').style.top = ((height - 345) / 2) + 'px';
        $id('cjcpbar').style.left = ((height - 570) / 2) + 'px';
        $id('cjcproc').style.top = ((height - 345) / 2) + 'px';
        $id('cjcproc').style.left = ((height - 570) / 2) + 'px';

        var rsize = $id("cjcwrap").getBoundingClientRect().width;
        renderer.setSize(rsize - 5, rsize - 5);
    }

    function handleDragOver(e) {
        if (waiting) return;

        e.stopPropagation();
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
    }

    function handleFileDrop(e) {
        e.stopPropagation();
        e.preventDefault();

        if (waiting) return;
        //first, check if its a file
        if (e.dataTransfer.files.length > 0) {
            if (e.dataTransfer.files[0].size > max_file_size) {
                alert('File is too big - maximum allowed size is 50mb');
                return false;
            }

            if (!supported_file_type(e.dataTransfer.files[0].name)) {
                alert('File type is not supported');
                return false;
            }

            var stlfile = "D:\Dev_NET\Visual_2012\Git_repository\pingolikorea\apdlzjtmN\Design.Web.Front\FileUpload\Article\roll_piggy_bank.stl";

            read_file(e.dataTransfer.files[0]);
        }
        else if (typeof e.dataTransfer.getData("Text") === 'string') {
            //check - maybe a url?
            alert("here");
            read_from_url(e.dataTransfer.getData("Text"));
        }
    }

    function supported_file_type(filename) {
        //alert(filename);
        switch (filename.split('.').pop().toLowerCase()) {
            case 'stl':
            case 'obj':
            case 'vf':
                return true;
                break;

            default:
                return false;
        }
    }

    function switch_view(v) {
        $id('cjcdrag').style.display = ((v == 'drag') ? 'block' : 'none');
        $id('cjcpbar').style.display = ((v == 'pbar') ? 'block' : 'none');
        $id('cjcproc').style.display = ((v == 'proc') ? 'block' : 'none');
        $id('cjc').style.display = ((v == 'cjc') ? 'block' : 'none');
    }

    function after_error() {
        switch_view('drag');
        cancel_download = false;
        waiting = false;
        return false;
    }

    function after_file_load(filename, s) {
        var vf_data;
        //console.log(s);
        try {
            vf_data = parse_3d_file(filename, s);
            //console.log(vf_data);
        }
        catch (err) {
            vf_data = "Error parsing the file";
        }

        if (typeof vf_data === 'string') {
            switch_view('drag');
            waiting = false;
            return;
        }

        if (mesh != null) { scene.remove(mesh); mesh = null };

        var geo = new THREE.Geometry;
        geo.vertices = vf_data.vertices;
        geo.faces = vf_data.faces;
        geo.computeBoundingBox();

        geo.computeCentroids();
        geo.computeFaceNormals();
        geo.computeVertexNormals();
        THREE.GeometryUtils.center(geo);
        mesh = new THREE.Mesh(geo, material);

        mesh.scale.set(1, 1, 1);
        if (vf_data.colors)
            alert("vf_data.colors");
        //set_color($id('white_color'), '#FFFFFF');

        update_mesh_color();

        scene.add(mesh);

        directionalLight.position.x = geo.boundingBox.min.x * 2;
        directionalLight.position.y = geo.boundingBox.min.y * 2;
        directionalLight.position.z = geo.boundingBox.max.z * 0;

        pointLight.position.x = (geo.boundingBox.min.x + geo.boundingBox.max.x) / 2;
        pointLight.position.y = (geo.boundingBox.min.y + geo.boundingBox.max.y) / 2;
        pointLight.position.z = geo.boundingBox.max.z * 0;

        camera.position.set(0, 0, Math.max(geo.boundingBox.max.x * 3, geo.boundingBox.max.y * 3, geo.boundingBox.max.z * 0));
        //controls.reset();

        switch_view('cjc');

        var xsize = geo.boundingBox.max.x - geo.boundingBox.min.x;
        var ysize = geo.boundingBox.max.y - geo.boundingBox.min.y;
        var zsize = geo.boundingBox.max.z - geo.boundingBox.min.z;
        vol = compute_vol(geo);

        $id('ivol').innerHTML = numberWithCommas(vol.toFixed(0));
        $id('isize').innerHTML = numberWithCommas(xsize.toFixed(0)) + ' x ' + numberWithCommas(ysize.toFixed(0)) + ' x ' + numberWithCommas(zsize.toFixed(0));

        $id('ifilename').innerHTML = filename.substr(0, 20);
        $id('ifilename').style.visibility = 'visible';

        setTimeout(function () { $id('statswrap').style.width = '280px'; }, 500);

        waiting = false;

        var onSuccess = function (result) {
            console.log("볼륨 : " + result.volume + " X : " + result.x + " Y : " + result.y + " Z : " + result.z);
        }
        Ajax.AjaxResponseModelService(this, "/main/testVolume", { fileName: filename }, onSuccess);

    }

    function update_mesh_color() {
        if (mesh == null) return;
        mesh.material.color.set(parseInt(mesh_color.substr(1), 16));
    }

    function compute_vol(geo) {
        var x1, x2, x3, y1, y2, y3, z1, z2, z3, i;
        var len = geo.faces.length;
        var totalVolume = 0;

        for (i = 0; i < len; i++) {
            x1 = geo.vertices[geo.faces[i].a].x;
            y1 = geo.vertices[geo.faces[i].a].y;
            z1 = geo.vertices[geo.faces[i].a].z;
            x2 = geo.vertices[geo.faces[i].b].x;
            y2 = geo.vertices[geo.faces[i].b].y;
            z2 = geo.vertices[geo.faces[i].b].z;
            x3 = geo.vertices[geo.faces[i].c].x;
            y3 = geo.vertices[geo.faces[i].c].y;
            z3 = geo.vertices[geo.faces[i].c].z;

            totalVolume +=
                (-x3 * y2 * z1 +
                x2 * y3 * z1 +
                x3 * y1 * z2 -
                x1 * y3 * z2 -
                x2 * y1 * z3 +
                x1 * y2 * z3) / 6;
        }

        return Math.abs(totalVolume);
    }

    function numberWithCommas(x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }

    function set_shading(i) {
        if (i == 2)
            material.wireframe = true;
        else {
            material.wireframe = false;
            material.shading = ((i == 1) ? THREE.SmoothShading : THREE.FlatShading);
            if (mesh != null)
                mesh.geometry.normalsNeedUpdate = true;
        }
    }

    function view_example(ename) {
        download_from_local('/FileUpload/Article/' + ename, ename);
    }

    function reset() {
        if (waiting) return;
        switch_view('drag');
        if (mesh != null) { scene.remove(mesh); mesh = null; }
        $id('fileselect').value = '';
    }


    function threePointLight() {

        directionalLight = new THREE.DirectionalLight(0xb8b8b8);
        directionalLight.position.set(1, 1, 1).normalize();
        directionalLight.intensity = 1.0;
        scene.add(directionalLight);

        directionalLight = new THREE.DirectionalLight(0xb8b8b8);
        directionalLight.position.set(-1, 0.6, 0.5).normalize();
        directionalLight.intensity = 0.5;
        scene.add(directionalLight);

        directionalLight = new THREE.DirectionalLight();
        directionalLight.position.set(-0.3, 0.6, -0.8).normalize(0xb8b8b8);
        directionalLight.intensity = 0.45;
        scene.add(directionalLight);

    }
</script>
<header>
    <h4>By<a href="javascript:void(0);" onclick="view_example('world_whale.stl');"> freeviewer </a> [@ViewBag.Size] <br /> @ViewBag.Volume</h4>
</header>

<input id="fileselect" style="top: -150px; position: absolute;" onchange="upload_file();" type="file">
<div id="mainwrap" style="margin: 0px auto; text-align: center; visibility: hidden;">
    <div id="cjcwrap" style="background: rgb(238, 238, 238); border: 1px dashed rgb(0, 0, 0); border-image: none; display: inline-block; position: relative;">
        <div id="cjcdrag" style="width: 350px; height: 100px; text-align: center; position: absolute;">
            <span style="font: 20px/normal Arial; color: rgb(52, 52, 52); font-size-adjust: none; font-stretch: normal;">Drag &amp; drop your STL file here</span>
        </div>
        <div id="cjcpbar" style="width: 350px; height: 50px; text-align: center; display: none; position: absolute;">
            <span style="font: 15px/normal Arial; color: rgb(52, 52, 120); font-size-adjust: none; font-stretch: normal;">Reading file ...</span><br>
            <progress id="file_pbar" value="0" max="1"></progress>
            @*<br>
            <span id="fcancel" style="text-decoration: underline; cursor: pointer;" onclick="cancel_download=true;">(cancel)</span>*@
        </div>
        <div id="cjcproc" style="width: 350px; height: 50px; text-align: center; display: none; position: absolute;">
            <span style="font: 15px/normal Arial; color: rgb(52, 52, 120); font-size-adjust: none; font-stretch: normal;">Processing ...</span><br>
        </div>
        <div id="cjc" style="margin: 0px auto; left: 0px; top: 0px; text-align: center; display: none; position: absolute;" onmousedown="controls.autoRotate=false;">
        </div>
    </div>
    <div id="statswrap" style="width: 0px;">
        <div style="width: 280px; overflow: hidden;">
            <h1 id="ifilename" style="visibility: hidden;">_</h1>
            <div class="cinfo">
                <h2>Model info</h2>
                <table>
                    <tbody>
                        <tr style="vertical-align: bottom;">
                            <th>Size (mm)</th>
                            <td id="isize"></td>
                        </tr>
                        <tr>
                            <th>Volume (mm<sup>3</sup>)</th>
                            <td id="ivol"></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script>

    var scene = new THREE.Scene();
    //add
    var gridHelper = new THREE.GridHelper(50, 5);
    gridHelper.position = new THREE.Vector3(0, 0, 0);
    gridHelper.rotation = new THREE.Euler(0, 0, 0);
    scene.add(gridHelper);
    //add
    var is_webgl = webgl_Detector.webgl;
    //upd
    var renderer = is_webgl ? new THREE.WebGLRenderer({ preserveDrawingBuffer: true, antialias: true, alpha: true }) : new THREE.CanvasRenderer();

    var mesh = null;
    var ambientLight = null;
    var directionalLight = null;
    var pointLight = null;

    do_resize();

    renderer.setClearColor(0x000000, 0);
    //add
    //renderer.setPixelRatio(window.devicePixelRatio);
    $id('cjc').appendChild(renderer.domElement);

    var camera = new THREE.PerspectiveCamera(37.8, 1, 0.5, 10000);
    //upd
    //var camera = new THREE.PerspectiveCamera(60, 1.5, 0.01, 50);
    camera.position.set(-5, 5, 0);
    //add
    var target = new THREE.Vector3(-1, 1, 0);
    camera.lookAt(target);
    scene.add(camera);

    ambientLight = new THREE.AmbientLight(0x202020);
    camera.add(ambientLight);

    threePointLight();

    pointLight = new THREE.PointLight(0xffffff, 0.3);
    pointLight.position.x = 0;
    pointLight.position.y = -0;
    pointLight.position.z = 0;
    camera.add(pointLight);

    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
        controls.update();
    }

    var controls = new THREE.OrbitControls(camera, renderer.domElement);
    //add
    controls.target = target;
    //add
    camera.updateProjectionMatrix();

    //var controls = new THREE.NormalControls(camera, renderer.domElement);

    animate();

    window.onresize = function () {
        do_resize();
    }

    $id('cjcwrap').addEventListener('dragover', handleDragOver, false);
    $id('cjcwrap').addEventListener('drop', handleFileDrop, false);

</script>

<script>setTimeout(function () { $id('mainwrap').style.visibility = 'visible'; }, 200);</script>

<script>
    if (need_browser)
        alert('Your browser is too old and is not supported by this website. Please install a modern browser (Chrome is recommended).');
</script>
